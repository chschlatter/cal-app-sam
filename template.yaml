AWSTemplateFormatVersion: 2010-09-09
Description: >-
  cal-app-sam

Transform:
  - AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 100
    Runtime: nodejs18.x
    MemorySize: 1024
    Architectures:
      - x86_64
    Environment:
      Variables:
        JWT_SECRET: !Sub "{{resolve:ssm:/${AWS::StackName}/JWT_SECRET}}"

Parameters:
  EnvType:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - test
    ConstraintDescription: must specify prod or test.
  EventsNoLockTable:
    Type: String
    Description: The DynamoDB table name to store additional events
    Default: cal_events_no_lock_dev
  CFDistCNAME:
    Type: String
    Description: The CloudFront distribution CNAME
    Default: kalender-dev.schlatter.net
  CFDistViewerCertificate:
    Type: String
    Description: The CloudFront distribution viewer certificate
    Default: "arn:aws:acm:us-east-1:374093763622:certificate/1d31fe2a-19bf-4e16-b043-4b6ef02b31e6"

Conditions:
  CreateTestResources: !Equals
    - !Ref EnvType
    - test

Resources:
  # DynamoDB table to store events with LSI for start-date
  DbEventsNoLockTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Ref EventsNoLockTable
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: startDate
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: startDateIndex
          KeySchema:
            - AttributeName: PK
              KeyType: HASH
            - AttributeName: startDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  CalApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      MergeDefinitions: true # Merge OpenAPI definitions with the SAM template
      DefinitionBody:
        "Fn::Transform":
          Name: AWS::Include
          Parameters:
            Location: "api.json"

  # This is a Lambda function config associated with the source code: listEvents.handler.js
  listEvents:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/listEvents.handler
      Description: List events between two dates
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsNoLockTable
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsNoLockTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  listEventsApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt listEvents.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # This is a Lambda function config associated with the source code: createEvent.handler.js
  createEvent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/createEvent.handler
      Description: Create a new event
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsNoLockTable
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsNoLockTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  createEventApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt createEvent.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # This is a Lambda function config associated with the source code: updateEvent.handler.js
  updateEvent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/updateEvent.handler
      Description: Update an event
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsNoLockTable
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsNoLockTable
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  updateEventApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt updateEvent.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # This is a Lambda function config associated with the source code: deleteEvent.handler.js
  deleteEvent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/deleteEvent.handler
      Description: Delete an event
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsNoLockTable
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsNoLockTable
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  deleteEventApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt deleteEvent.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # This is a Lambda function config associated with the source code: listUsers.handler.js
  listUsers:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/listUsers.handler
      Description: List users
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  listUsersApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt listUsers.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # This is a Lambda function config associated with the source code: auth.handler.js
  auth:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/auth.handler
      Description: Authenticate a user
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  authApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt auth.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # This is a Lambda function config associated with the source code: login.handler.js
  login:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/login.handler
      Description: Login a user
      Environment:
        Variables:
          PW_HMAC_KEY: "{{resolve:ssm:/cal-app-sam/PW_HMAC_KEY}}"
          GOOGLE_CLIENT_ID: "{{resolve:ssm:/cal-app-sam/GOOGLE_CLIENT_ID}}"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  loginApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt login.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # This is a Lambda function config associated with the source code: getPrices.handler.js
  getPrices:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getPrices.handler
      Description: Get prices
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  getPricesApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt getPrices.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # Lambda function for test purposes
  test:
    Type: AWS::Serverless::Function
    Condition: CreateTestResources
    Properties:
      Handler: src/handlers/testApi.handler
      Description: Test function for API Gateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsNoLockTable
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsNoLockTable
      Events:
        AuthToken:
          Type: Api
          Properties:
            RestApiId: !Ref CalApi
            Path: /api/test/auth
            Method: GET
        BatchCreateEvents:
          Type: Api
          Properties:
            RestApiId: !Ref CalApi
            Path: /api/test/events
            Method: POST
        DeleteEvents:
          Type: Api
          Properties:
            RestApiId: !Ref CalApi
            Path: /api/test/events/{year}
            Method: DELETE
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]

  # Lambda function for backing up events to S3 (for LockDb)
  BackupEventsLockDbFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/backupEventsLockDb.handler
      Description: Functions to backup/restore events to/from S3
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EventsNoLockTable
        - DynamoDBWritePolicy:
            TableName: !Ref EventsNoLockTable
        - S3WritePolicy:
            BucketName: !Ref BackupS3Bucket
        - S3ReadPolicy:
            BucketName: !Ref BackupS3Bucket
      Environment:
        Variables:
          EVENTS_TABLE: !Ref EventsNoLockTable
          BACKUP_BUCKET: !Ref BackupS3Bucket
          API_TOKEN: !Sub "{{resolve:ssm:/${AWS::StackName}/API_TOKEN}}"
      Events:
        ScheduledBackup:
          Type: Schedule
          Properties:
            Schedule: cron(0 3 * * ? *) # every day at 3am
            Name: !Sub "DailyBackupSchedule-${EnvType}"
            Description: "Trigger BackupEventsLockDbFunction once per day"
            Input: '{"type": "backup"}'
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External: ["@aws-sdk"]
  BackupEventsLockDbFunctionApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt BackupEventsLockDbFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CalApi}/*/*/*"

  # S3 bucket to store backups
  BackupS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-backups"
      AccessControl: Private

  # S3 bucket to store the web application (Dev)
  # with a policy to allow access from cloudfront (no public access)
  WebAppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend"
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  WebAppS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebAppS3Bucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${WebAppS3Bucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${WebAppCloudFrontDistribution}"

  # CloudFront function to rewrite login path
  RewriteLoginFunction:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      Name: !Sub "${AWS::StackName}-RewriteLoginFunction"
      FunctionConfig:
        Comment: "Rewrite login path"
        Runtime: cloudfront-js-2.0
      FunctionCode: |
        function handler(event) {
          const request = event.request;
          const uri = request.uri;
          if (uri === "/login") {
            request.uri = '/login.html';
          }
          return request;
        }

  # CloudFront access control for s3 bucket
  WebAppS3BucketOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "OAC/${WebAppS3Bucket}"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront distribution to serve the web application (Dev)
  WebAppCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebAppS3Bucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt WebAppS3BucketOAC.Id
          # API Gateway endpoint
          - DomainName: !Sub "${CalApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: ApiGatewayOrigin
            OriginPath: "/Prod"
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        Aliases:
          - !Ref CFDistCNAME
        ViewerCertificate:
          AcmCertificateArn: !Ref CFDistViewerCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
          # managed cache policy CachingDisabled
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RewriteLoginFunction.FunctionMetadata.FunctionARN
        CacheBehaviors:
          - PathPattern: /api/*
            # [HEAD, DELETE, POST, GET, OPTIONS, PUT, PATCH]
            AllowedMethods:
              - HEAD
              - DELETE
              - POST
              - GET
              - OPTIONS
              - PUT
              - PATCH
            TargetOriginId: ApiGatewayOrigin
            ForwardedValues:
              QueryString: true
            ViewerProtocolPolicy: redirect-to-https
            # managed cache policy CachingDisabled
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            # managed origin request policy AllViewerExceptHostHeader
            # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html#managed-origin-request-policy-all-viewer-except-host-header
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${CalApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  WebAppS3Bucket:
    Description: "S3 bucket for the web application"
    Value: !Ref WebAppS3Bucket
  WebAppCloudFrontDistribution:
    Description: "CloudFront distribution for the web application"
    Value: !Ref WebAppCloudFrontDistribution
